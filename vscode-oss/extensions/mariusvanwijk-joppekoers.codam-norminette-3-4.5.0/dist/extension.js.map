{"version":3,"file":"extension.js","mappings":"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","sources":[".././node_modules/ignore/index.js",".././src/brackets.ts",".././src/decorations.ts",".././src/extension.ts",".././src/getEnvironmentVariables.ts",".././src/normignore.ts",".././src/norminette.ts",".././src/tree.ts","../external commonjs \"vscode\"","../external node-commonjs \"child_process\"","../external node-commonjs \"fs\"","../external node-commonjs \"os\"","../external node-commonjs \"path\"","../external node-commonjs \"util\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["// A simple implementation of make-array\nfunction makeArray (subject) {\n  return Array.isArray(subject)\n    ? subject\n    : [subject]\n}\n\nconst EMPTY = ''\nconst SPACE = ' '\nconst ESCAPE = '\\\\'\nconst REGEX_TEST_BLANK_LINE = /^\\s+$/\nconst REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\\\!/\nconst REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\\\#/\nconst REGEX_SPLITALL_CRLF = /\\r?\\n/g\n// /foo,\n// ./foo,\n// ../foo,\n// .\n// ..\nconst REGEX_TEST_INVALID_PATH = /^\\.*\\/|^\\.+$/\n\nconst SLASH = '/'\nconst KEY_IGNORE = typeof Symbol !== 'undefined'\n  ? Symbol.for('node-ignore')\n  /* istanbul ignore next */\n  : 'node-ignore'\n\nconst define = (object, key, value) =>\n  Object.defineProperty(object, key, {value})\n\nconst REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g\n\n// Sanitize the range of a regular expression\n// The cases are complicated, see test cases for details\nconst sanitizeRange = range => range.replace(\n  REGEX_REGEXP_RANGE,\n  (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0)\n    ? match\n    // Invalid range (out of order) which is ok for gitignore rules but\n    //   fatal for JavaScript regular expression, so eliminate it.\n    : EMPTY\n)\n\n// See fixtures #59\nconst cleanRangeBackSlash = slashes => {\n  const {length} = slashes\n  return slashes.slice(0, length - length % 2)\n}\n\n// > If the pattern ends with a slash,\n// > it is removed for the purpose of the following description,\n// > but it would only find a match with a directory.\n// > In other words, foo/ will match a directory foo and paths underneath it,\n// > but will not match a regular file or a symbolic link foo\n// >  (this is consistent with the way how pathspec works in general in Git).\n// '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'\n// -> ignore-rules will not deal with it, because it costs extra `fs.stat` call\n//      you could use option `mark: true` with `glob`\n\n// '`foo/`' should not continue with the '`..`'\nconst REPLACERS = [\n\n  // > Trailing spaces are ignored unless they are quoted with backslash (\"\\\")\n  [\n    // (a\\ ) -> (a )\n    // (a  ) -> (a)\n    // (a \\ ) -> (a  )\n    /\\\\?\\s+$/,\n    match => match.indexOf('\\\\') === 0\n      ? SPACE\n      : EMPTY\n  ],\n\n  // replace (\\ ) with ' '\n  [\n    /\\\\\\s/g,\n    () => SPACE\n  ],\n\n  // Escape metacharacters\n  // which is written down by users but means special for regular expressions.\n\n  // > There are 12 characters with special meanings:\n  // > - the backslash \\,\n  // > - the caret ^,\n  // > - the dollar sign $,\n  // > - the period or dot .,\n  // > - the vertical bar or pipe symbol |,\n  // > - the question mark ?,\n  // > - the asterisk or star *,\n  // > - the plus sign +,\n  // > - the opening parenthesis (,\n  // > - the closing parenthesis ),\n  // > - and the opening square bracket [,\n  // > - the opening curly brace {,\n  // > These special characters are often called \"metacharacters\".\n  [\n    /[\\\\$.|*+(){^]/g,\n    match => `\\\\${match}`\n  ],\n\n  [\n    // > a question mark (?) matches a single character\n    /(?!\\\\)\\?/g,\n    () => '[^/]'\n  ],\n\n  // leading slash\n  [\n\n    // > A leading slash matches the beginning of the pathname.\n    // > For example, \"/*.c\" matches \"cat-file.c\" but not \"mozilla-sha1/sha1.c\".\n    // A leading slash matches the beginning of the pathname\n    /^\\//,\n    () => '^'\n  ],\n\n  // replace special metacharacter slash after the leading slash\n  [\n    /\\//g,\n    () => '\\\\/'\n  ],\n\n  [\n    // > A leading \"**\" followed by a slash means match in all directories.\n    // > For example, \"**/foo\" matches file or directory \"foo\" anywhere,\n    // > the same as pattern \"foo\".\n    // > \"**/foo/bar\" matches file or directory \"bar\" anywhere that is directly\n    // >   under directory \"foo\".\n    // Notice that the '*'s have been replaced as '\\\\*'\n    /^\\^*\\\\\\*\\\\\\*\\\\\\//,\n\n    // '**/foo' <-> 'foo'\n    () => '^(?:.*\\\\/)?'\n  ],\n\n  // starting\n  [\n    // there will be no leading '/'\n    //   (which has been replaced by section \"leading slash\")\n    // If starts with '**', adding a '^' to the regular expression also works\n    /^(?=[^^])/,\n    function startingReplacer () {\n      // If has a slash `/` at the beginning or middle\n      return !/\\/(?!$)/.test(this)\n        // > Prior to 2.22.1\n        // > If the pattern does not contain a slash /,\n        // >   Git treats it as a shell glob pattern\n        // Actually, if there is only a trailing slash,\n        //   git also treats it as a shell glob pattern\n\n        // After 2.22.1 (compatible but clearer)\n        // > If there is a separator at the beginning or middle (or both)\n        // > of the pattern, then the pattern is relative to the directory\n        // > level of the particular .gitignore file itself.\n        // > Otherwise the pattern may also match at any level below\n        // > the .gitignore level.\n        ? '(?:^|\\\\/)'\n\n        // > Otherwise, Git treats the pattern as a shell glob suitable for\n        // >   consumption by fnmatch(3)\n        : '^'\n    }\n  ],\n\n  // two globstars\n  [\n    // Use lookahead assertions so that we could match more than one `'/**'`\n    /\\\\\\/\\\\\\*\\\\\\*(?=\\\\\\/|$)/g,\n\n    // Zero, one or several directories\n    // should not use '*', or it will be replaced by the next replacer\n\n    // Check if it is not the last `'/**'`\n    (_, index, str) => index + 6 < str.length\n\n      // case: /**/\n      // > A slash followed by two consecutive asterisks then a slash matches\n      // >   zero or more directories.\n      // > For example, \"a/**/b\" matches \"a/b\", \"a/x/b\", \"a/x/y/b\" and so on.\n      // '/**/'\n      ? '(?:\\\\/[^\\\\/]+)*'\n\n      // case: /**\n      // > A trailing `\"/**\"` matches everything inside.\n\n      // #21: everything inside but it should not include the current folder\n      : '\\\\/.+'\n  ],\n\n  // intermediate wildcards\n  [\n    // Never replace escaped '*'\n    // ignore rule '\\*' will match the path '*'\n\n    // 'abc.*/' -> go\n    // 'abc.*'  -> skip this rule\n    /(^|[^\\\\]+)\\\\\\*(?=.+)/g,\n\n    // '*.js' matches '.js'\n    // '*.js' doesn't match 'abc'\n    (_, p1) => `${p1}[^\\\\/]*`\n  ],\n\n  [\n    // unescape, revert step 3 except for back slash\n    // For example, if a user escape a '\\\\*',\n    // after step 3, the result will be '\\\\\\\\\\\\*'\n    /\\\\\\\\\\\\(?=[$.|*+(){^])/g,\n    () => ESCAPE\n  ],\n\n  [\n    // '\\\\\\\\' -> '\\\\'\n    /\\\\\\\\/g,\n    () => ESCAPE\n  ],\n\n  [\n    // > The range notation, e.g. [a-zA-Z],\n    // > can be used to match one of the characters in a range.\n\n    // `\\` is escaped by step 3\n    /(\\\\)?\\[([^\\]/]*?)(\\\\*)($|\\])/g,\n    (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE\n      // '\\\\[bar]' -> '\\\\\\\\[bar\\\\]'\n      ? `\\\\[${range}${cleanRangeBackSlash(endEscape)}${close}`\n      : close === ']'\n        ? endEscape.length % 2 === 0\n          // A normal case, and it is a range notation\n          // '[bar]'\n          // '[bar\\\\\\\\]'\n          ? `[${sanitizeRange(range)}${endEscape}]`\n          // Invalid range notaton\n          // '[bar\\\\]' -> '[bar\\\\\\\\]'\n          : '[]'\n        : '[]'\n  ],\n\n  // ending\n  [\n    // 'js' will not match 'js.'\n    // 'ab' will not match 'abc'\n    /(?:[^*])$/,\n\n    // WTF!\n    // https://git-scm.com/docs/gitignore\n    // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)\n    // which re-fixes #24, #38\n\n    // > If there is a separator at the end of the pattern then the pattern\n    // > will only match directories, otherwise the pattern can match both\n    // > files and directories.\n\n    // 'js*' will not match 'a.js'\n    // 'js/' will not match 'a.js'\n    // 'js' will match 'a.js' and 'a.js/'\n    match => /\\/$/.test(match)\n      // foo/ will not match 'foo'\n      ? `${match}$`\n      // foo matches 'foo' and 'foo/'\n      : `${match}(?=$|\\\\/$)`\n  ],\n\n  // trailing wildcard\n  [\n    /(\\^|\\\\\\/)?\\\\\\*$/,\n    (_, p1) => {\n      const prefix = p1\n        // '\\^':\n        // '/*' does not match EMPTY\n        // '/*' does not match everything\n\n        // '\\\\\\/':\n        // 'abc/*' does not match 'abc/'\n        ? `${p1}[^/]+`\n\n        // 'a*' matches 'a'\n        // 'a*' matches 'aa'\n        : '[^/]*'\n\n      return `${prefix}(?=$|\\\\/$)`\n    }\n  ],\n]\n\n// A simple cache, because an ignore rule only has only one certain meaning\nconst regexCache = Object.create(null)\n\n// @param {pattern}\nconst makeRegex = (pattern, negative, ignorecase) => {\n  const r = regexCache[pattern]\n  if (r) {\n    return r\n  }\n\n  // const replacers = negative\n  //   ? NEGATIVE_REPLACERS\n  //   : POSITIVE_REPLACERS\n\n  const source = REPLACERS.reduce(\n    (prev, current) => prev.replace(current[0], current[1].bind(pattern)),\n    pattern\n  )\n\n  return regexCache[pattern] = ignorecase\n    ? new RegExp(source, 'i')\n    : new RegExp(source)\n}\n\nconst isString = subject => typeof subject === 'string'\n\n// > A blank line matches no files, so it can serve as a separator for readability.\nconst checkPattern = pattern => pattern\n  && isString(pattern)\n  && !REGEX_TEST_BLANK_LINE.test(pattern)\n\n  // > A line starting with # serves as a comment.\n  && pattern.indexOf('#') !== 0\n\nconst splitPattern = pattern => pattern.split(REGEX_SPLITALL_CRLF)\n\nclass IgnoreRule {\n  constructor (\n    origin,\n    pattern,\n    negative,\n    regex\n  ) {\n    this.origin = origin\n    this.pattern = pattern\n    this.negative = negative\n    this.regex = regex\n  }\n}\n\nconst createRule = (pattern, ignorecase) => {\n  const origin = pattern\n  let negative = false\n\n  // > An optional prefix \"!\" which negates the pattern;\n  if (pattern.indexOf('!') === 0) {\n    negative = true\n    pattern = pattern.substr(1)\n  }\n\n  pattern = pattern\n  // > Put a backslash (\"\\\") in front of the first \"!\" for patterns that\n  // >   begin with a literal \"!\", for example, `\"\\!important!.txt\"`.\n  .replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, '!')\n  // > Put a backslash (\"\\\") in front of the first hash for patterns that\n  // >   begin with a hash.\n  .replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, '#')\n\n  const regex = makeRegex(pattern, negative, ignorecase)\n\n  return new IgnoreRule(\n    origin,\n    pattern,\n    negative,\n    regex\n  )\n}\n\nconst throwError = (message, Ctor) => {\n  throw new Ctor(message)\n}\n\nconst checkPath = (path, originalPath, doThrow) => {\n  if (!isString(path)) {\n    return doThrow(\n      `path must be a string, but got \\`${originalPath}\\``,\n      TypeError\n    )\n  }\n\n  // We don't know if we should ignore EMPTY, so throw\n  if (!path) {\n    return doThrow(`path must not be empty`, TypeError)\n  }\n\n  // Check if it is a relative path\n  if (checkPath.isNotRelative(path)) {\n    const r = '`path.relative()`d'\n    return doThrow(\n      `path should be a ${r} string, but got \"${originalPath}\"`,\n      RangeError\n    )\n  }\n\n  return true\n}\n\nconst isNotRelative = path => REGEX_TEST_INVALID_PATH.test(path)\n\ncheckPath.isNotRelative = isNotRelative\ncheckPath.convert = p => p\n\nclass Ignore {\n  constructor ({\n    ignorecase = true\n  } = {}) {\n    this._rules = []\n    this._ignorecase = ignorecase\n    define(this, KEY_IGNORE, true)\n    this._initCache()\n  }\n\n  _initCache () {\n    this._ignoreCache = Object.create(null)\n    this._testCache = Object.create(null)\n  }\n\n  _addPattern (pattern) {\n    // #32\n    if (pattern && pattern[KEY_IGNORE]) {\n      this._rules = this._rules.concat(pattern._rules)\n      this._added = true\n      return\n    }\n\n    if (checkPattern(pattern)) {\n      const rule = createRule(pattern, this._ignorecase)\n      this._added = true\n      this._rules.push(rule)\n    }\n  }\n\n  // @param {Array<string> | string | Ignore} pattern\n  add (pattern) {\n    this._added = false\n\n    makeArray(\n      isString(pattern)\n        ? splitPattern(pattern)\n        : pattern\n    ).forEach(this._addPattern, this)\n\n    // Some rules have just added to the ignore,\n    // making the behavior changed.\n    if (this._added) {\n      this._initCache()\n    }\n\n    return this\n  }\n\n  // legacy\n  addPattern (pattern) {\n    return this.add(pattern)\n  }\n\n  //          |           ignored : unignored\n  // negative |   0:0   |   0:1   |   1:0   |   1:1\n  // -------- | ------- | ------- | ------- | --------\n  //     0    |  TEST   |  TEST   |  SKIP   |    X\n  //     1    |  TESTIF |  SKIP   |  TEST   |    X\n\n  // - SKIP: always skip\n  // - TEST: always test\n  // - TESTIF: only test if checkUnignored\n  // - X: that never happen\n\n  // @param {boolean} whether should check if the path is unignored,\n  //   setting `checkUnignored` to `false` could reduce additional\n  //   path matching.\n\n  // @returns {TestResult} true if a file is ignored\n  _testOne (path, checkUnignored) {\n    let ignored = false\n    let unignored = false\n\n    this._rules.forEach(rule => {\n      const {negative} = rule\n      if (\n        unignored === negative && ignored !== unignored\n        || negative && !ignored && !unignored && !checkUnignored\n      ) {\n        return\n      }\n\n      const matched = rule.regex.test(path)\n\n      if (matched) {\n        ignored = !negative\n        unignored = negative\n      }\n    })\n\n    return {\n      ignored,\n      unignored\n    }\n  }\n\n  // @returns {TestResult}\n  _test (originalPath, cache, checkUnignored, slices) {\n    const path = originalPath\n      // Supports nullable path\n      && checkPath.convert(originalPath)\n\n    checkPath(path, originalPath, throwError)\n\n    return this._t(path, cache, checkUnignored, slices)\n  }\n\n  _t (path, cache, checkUnignored, slices) {\n    if (path in cache) {\n      return cache[path]\n    }\n\n    if (!slices) {\n      // path/to/a.js\n      // ['path', 'to', 'a.js']\n      slices = path.split(SLASH)\n    }\n\n    slices.pop()\n\n    // If the path has no parent directory, just test it\n    if (!slices.length) {\n      return cache[path] = this._testOne(path, checkUnignored)\n    }\n\n    const parent = this._t(\n      slices.join(SLASH) + SLASH,\n      cache,\n      checkUnignored,\n      slices\n    )\n\n    // If the path contains a parent directory, check the parent first\n    return cache[path] = parent.ignored\n      // > It is not possible to re-include a file if a parent directory of\n      // >   that file is excluded.\n      ? parent\n      : this._testOne(path, checkUnignored)\n  }\n\n  ignores (path) {\n    return this._test(path, this._ignoreCache, false).ignored\n  }\n\n  createFilter () {\n    return path => !this.ignores(path)\n  }\n\n  filter (paths) {\n    return makeArray(paths).filter(this.createFilter())\n  }\n\n  // @returns {TestResult}\n  test (path) {\n    return this._test(path, this._testCache, true)\n  }\n}\n\nconst factory = options => new Ignore(options)\n\nconst returnFalse = () => false\n\nconst isPathValid = path =>\n  checkPath(path && checkPath.convert(path), path, returnFalse)\n\nfactory.isPathValid = isPathValid\n\n// Fixes typescript\nfactory.default = factory\n\nmodule.exports = factory\n\n// Windows\n// --------------------------------------------------------------\n/* istanbul ignore if  */\nif (\n  // Detect `process` so that it can run in browsers.\n  typeof process !== 'undefined'\n  && (\n    process.env && process.env.IGNORE_TEST_WIN32\n    || process.platform === 'win32'\n  )\n) {\n  /* eslint no-control-regex: \"off\" */\n  const makePosix = str => /^\\\\\\\\\\?\\\\/.test(str)\n  || /[\"<>|\\u0000-\\u001F]+/u.test(str)\n    ? str\n    : str.replace(/\\\\/g, '/')\n\n  checkPath.convert = makePosix\n\n  // 'C:\\\\foo'     <- 'C:\\\\foo' has been converted to 'C:/'\n  // 'd:\\\\foo'\n  const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\\//i\n  checkPath.isNotRelative = path =>\n    REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path)\n    || isNotRelative(path)\n}\n","import * as vscode from 'vscode'\n\nexport function parseBrackets(text: string | Buffer): vscode.Range[] {\n\tif (text instanceof Buffer)\n\t\ttext = text.toString()\n\tconst lines = text.split('\\n')\n\tconst bracketPairs: vscode.Range[] = []\n\tlet endPos = new vscode.Position(0, 0)\n\twhile (endPos != null)\n\t\tendPos = skipBrackets(endPos, lines, bracketPairs)\n\treturn bracketPairs\n}\n\nexport function findMatchingBracket(bracketPos: vscode.Position, bracketPairs: vscode.Range[]): vscode.Position {\n\tfor (const bracketPair of bracketPairs) {\n\t\tif (bracketPair.start.isEqual(bracketPos))\n\t\t\treturn bracketPair.end\n\t\tif (bracketPair.end.isEqual(bracketPos))\n\t\t\treturn bracketPair.start\n\t}\n}\n\nfunction skipBrackets(startPos: vscode.Position, lines: string[], bracketPairs: vscode.Range[]): vscode.Position {\n\tlet hasStartBracket = false\n\tlet startBracket: vscode.Position\n\tlines[startPos.line] = lines[startPos.line].slice(startPos.character)\n\tfor (let i = startPos.line; i < lines.length; i++) {\n\t\tlet line = lines[i]\n\t\tif (line.length == 0)\n\t\t\tcontinue\n\n\t\tconst singleCommentIndex = line.indexOf('//')\n\t\tconst multiCommentIndex = line.indexOf('/*')\n\t\tconst doubleQuoteIndex = line.indexOf('\\\"')\n\t\tconst singleQuoteIndex = line.indexOf('\\'')\n\t\tconst bracketOpenIndex = line.indexOf('{')\n\n\t\tlet earliestInterruptor = singleCommentIndex\n\t\tif ((multiCommentIndex > 0 && multiCommentIndex < earliestInterruptor) || earliestInterruptor < 0)\n\t\t\tearliestInterruptor = multiCommentIndex\n\t\tif ((doubleQuoteIndex > 0 && doubleQuoteIndex < earliestInterruptor) || earliestInterruptor < 0)\n\t\t\tearliestInterruptor = doubleQuoteIndex\n\t\tif ((singleQuoteIndex > 0 && singleQuoteIndex < earliestInterruptor) || earliestInterruptor < 0)\n\t\t\tearliestInterruptor = singleQuoteIndex\n\t\tif (hasStartBracket && ((bracketOpenIndex > 0 && bracketOpenIndex < earliestInterruptor) || earliestInterruptor < 0))\n\t\t\tearliestInterruptor = bracketOpenIndex\n\n\t\tlet bracketIndex: number = hasStartBracket ? line.indexOf('}') : bracketOpenIndex\n\n\t\tif (earliestInterruptor >= 0 && (earliestInterruptor < bracketIndex || bracketIndex < 0)) {\n\t\t\tlet skipPos: vscode.Position = null\n\t\t\tconst interruptorPos = new vscode.Position(i, earliestInterruptor)\n\t\t\tif (earliestInterruptor == singleCommentIndex)\n\t\t\t\tcontinue\n\t\t\tif (earliestInterruptor == multiCommentIndex)\n\t\t\t\tskipPos = skipMultiComment(interruptorPos, lines)\n\t\t\telse if (earliestInterruptor == doubleQuoteIndex)\n\t\t\t\tskipPos = skipDoubleQuote(interruptorPos, lines)\n\t\t\telse if (earliestInterruptor == singleQuoteIndex)\n\t\t\t\tskipPos = skipSingleQuote(interruptorPos, lines)\n\t\t\telse if (earliestInterruptor == bracketOpenIndex)\n\t\t\t\tskipPos = skipBrackets(new vscode.Position(i, bracketOpenIndex), lines, bracketPairs)\n\t\t\tif (skipPos == null)\n\t\t\t\tbreak\n\t\t\tlines[skipPos.line] = line.slice(skipPos.character)\n\t\t\ti = skipPos.line - 1\n\t\t\tcontinue\n\t\t}\n\n\t\tif (bracketIndex >= 0) {\n\t\t\tif (i == startPos.line)\n\t\t\t\tbracketIndex += startPos.character\n\t\t\tif (hasStartBracket) {\n\t\t\t\tbracketPairs.push(new vscode.Range(startBracket, new vscode.Position(i, bracketIndex)))\n\t\t\t\treturn new vscode.Position(i, bracketIndex + 1)\n\t\t\t}\n\t\t\tstartBracket = new vscode.Position(i, bracketIndex)\n\t\t\thasStartBracket = true\n\t\t}\n\t}\n\treturn null\n}\n\nfunction skipMultiComment(pos: vscode.Position, lines: string[]): vscode.Position {\n\tlet endIndex = lines[pos.line].slice(pos.character + 2).indexOf('*/')\n\tif (endIndex >= 0)\n\t\treturn new vscode.Position(pos.line, pos.character + 2 + endIndex + 2)\n\tfor (let i = pos.line + 1; i < lines.length; i++) {\n\t\tendIndex = lines[i].indexOf('*/')\n\t\tif (endIndex >= 0)\n\t\t\treturn new vscode.Position(i, endIndex + 2)\n\t}\n\treturn null\n}\n\nfunction skipDoubleQuote(pos: vscode.Position, lines: string[]): vscode.Position {\n\tconst skipPos = skipUntilUnescapedString('\\\"', pos.translate(0, 1), lines)\n\tif (skipPos == null)\n\t\treturn null\n\treturn skipPos.translate(0, 1)\n}\n\nfunction skipSingleQuote(pos: vscode.Position, lines: string[]): vscode.Position {\n\tconst skipPos = skipUntilUnescapedString('\\'', pos.translate(0, 1), lines)\n\tif (skipPos == null)\n\t\treturn null\n\treturn skipPos.translate(0, 1)\n}\n\nfunction skipUntilUnescapedString(str: string, pos: vscode.Position, lines: string[]): vscode.Position {\n\tlet endIndex = -1\n\tlet index = pos.character\n\tdo {\n\t\tindex += endIndex + 1\n\t\tendIndex = lines[pos.line].slice(index).indexOf(str)\n\t} while (endIndex >= 0 && lines[pos.line][index + endIndex - 1] == '\\\\' && lines[pos.line][index + endIndex - 2] != '\\\\')\n\n\tif (endIndex >= 0)\n\t\treturn new vscode.Position(pos.line, endIndex + index)\n\tfor (let i = pos.line + 1; i < lines.length; i++) {\n\t\tendIndex = lines[i].indexOf(str)\n\t\tif (endIndex >= 0)\n\t\t\treturn new vscode.Position(i, endIndex)\n\t}\n\treturn null\n}\n","import * as vscode from 'vscode'\nimport { findMatchingBracket, parseBrackets } from './brackets'\nimport { NormData } from './norminette'\n\nconst decorations = {\n\terrors: vscode.window.createTextEditorDecorationType({\n\t\toverviewRulerColor: 'red',\n\t\toverviewRulerLane: vscode.OverviewRulerLane.Right,\n\t\tbackgroundColor: getDecorationColor(),\n\t}),\n\twholeLine: vscode.window.createTextEditorDecorationType({\n\t\toverviewRulerColor: 'red',\n\t\toverviewRulerLane: vscode.OverviewRulerLane.Right,\n\t\tbackgroundColor: getDecorationColor(),\n\t\tisWholeLine: true,\n\t}),\n}\n\nfunction getDecorationColor(): string | vscode.ThemeColor {\n\tconst input: string = vscode.workspace.getConfiguration(\"codam-norminette-3\").get(\"highlight-color\");\n\n\tif (input.startsWith(\"#\") || input.startsWith(\"rgb\"))\n\t\treturn input;\n\treturn new vscode.ThemeColor(input);\n}\n\nexport function updateDecorationColor() {\n\tdecorations.errors = vscode.window.createTextEditorDecorationType({\n\t\toverviewRulerColor: 'red',\n\t\toverviewRulerLane: vscode.OverviewRulerLane.Right,\n\t\tbackgroundColor: getDecorationColor(),\n\t});\n\tdecorations.wholeLine = vscode.window.createTextEditorDecorationType({\n\t\toverviewRulerColor: 'red',\n\t\toverviewRulerLane: vscode.OverviewRulerLane.Right,\n\t\tbackgroundColor: getDecorationColor(),\n\t});\n}\n\nfunction decorateWholeLine(line: string): boolean {\n\tconst wholeLineErrors = [\n\t\t'SPACE_EMPTY_LINE',\n\t\t'EMPTY_LINE_FUNCTION',\n\t\t'EMPTY_LINE_FILE_START',\n\t\t'EMPTY_LINE_FUNCTION',\n\t\t'EMPTY_LINE_EOF',\n\t\t'CONSECUTIVE_NEWLINES',\n\t\t'LINE_TOO_LONG',\n\t\t'UNRECOGNIZED_TOKEN'\n\t]\n\tfor (const lineError of wholeLineErrors) {\n\t\tif (line.includes(lineError))\n\t\t\treturn true\n\t}\n\treturn false\n}\n\nfunction getTabOffset(text: string, col: number): number {\n\tconst tabSplit: string[] = text.split('\\t')\n\tlet len: number = 0\n\tlet tabOffset: number = 0\n\tfor (const part of tabSplit) {\n\t\tlen += part.length\n\t\tif (len + tabOffset >= col)\n\t\t\treturn tabOffset\n\t\ttabOffset += 4 - (len % 4)\n\t\tif (len + tabOffset >= col)\n\t\t\treturn tabOffset\n\t}\n\treturn tabOffset\n}\n\nexport function applyDecorations(normData: NormData, editor: vscode.TextEditor, ignoreErrors: string[], displayErrorName: boolean) {\n\tconst errors: vscode.DecorationOptions[] = []\n\tconst wholeLineErrors: vscode.DecorationOptions[] = []\n\n\tnormData[Object.keys(normData)[0]].forEach((e) => {\n\t\tif (ignoreErrors.includes(e.error)) return\n\t\tconst decoration = {\n\t\t\trange: null,\n\t\t\thoverMessage: `**Error: ${e.errorText}${displayErrorName ? ` *(${e.error})*` : ''}**`,\n\t\t}\n\t\tconst line: vscode.TextLine = editor.document.lineAt(e.line)\n\t\tconst tabOffset: number = getTabOffset(line.text, e.col)\n\t\tconst wordRangeAtPosition: vscode.Range = editor.document.getWordRangeAtPosition(new vscode.Position(e.line, e.col - tabOffset))\n\t\tif (e.error === 'TOO_MANY_LINES') {\n\t\t\tconst startBracket = findMatchingBracket(new vscode.Position(e.line, e.col), parseBrackets(editor.document.getText()))\n\t\t\tdecoration.range = editor.document.lineAt(startBracket.line - 1).range\n\t\t\twholeLineErrors.push(decoration)\n\t\t}\n\t\telse if (decorateWholeLine(e.error)) {\n\t\t\tdecoration.range = line.range\n\t\t\twholeLineErrors.push(decoration)\n\t\t}\n\t\telse if (!e.col || !wordRangeAtPosition) {\n\t\t\tdecoration.range = line.range\n\t\t\terrors.push(decoration)\n\t\t}\n\t\telse {\n\t\t\tdecoration.range = wordRangeAtPosition\n\t\t\terrors.push(decoration)\n\t\t}\n\t})\n\teditor.setDecorations(decorations.errors, errors)\n\teditor.setDecorations(decorations.wholeLine, wholeLineErrors)\n}\n\nexport function clearDecorations(editor: vscode.TextEditor) {\n\teditor.setDecorations(decorations.errors, [])\n\teditor.setDecorations(decorations.wholeLine, [])\n}\n","import * as vscode from 'vscode'\nimport * as util from 'util'\nimport * as os from 'os'\nimport { applyDecorations, clearDecorations, updateDecorationColor } from './decorations'\nimport { IgnoreSystem, initNormignore, isIgnored } from './normignore'\nimport { execNorminette, NormData } from './norminette'\nimport { EnvironmentVariables, getEnvironmentVariables } from './getEnvironmentVariables'\nimport { NorminetteProvider } from './tree'\n\nlet outputChannel: vscode.OutputChannel\n\nexport function log(...msgs: any[]) {\n\tif (!outputChannel)\n\t\toutputChannel = vscode.window.createOutputChannel('codam-norminette-3')\n\toutputChannel.appendLine(msgs.map((msg) => util.inspect(msg, false, null, false)).join(' '))\n}\n\nasync function updateDecorations(editor: vscode.TextEditor, ignores: IgnoreSystem, env: EnvironmentVariables) {\n\tif (editor.document.uri.scheme != 'file')\n\t\treturn\n\tlet path = editor.document.uri.path\n\tif (os.platform() == 'win32') {\n\t\tpath = path.slice(1) // windows ads a '/' prefix to every path so here we delete it\n\t\tif (env.wsl)\n\t\t\tpath = path.replace(/^.:/, (m: string) => `/mnt/${m.slice(0, -1).toLowerCase()}`)\n\t}\n\tconst filename: string = path.replace(/^.*[\\\\\\/]/, '') // possibly just \\/ instead of \\\\\\/\n\n\tif (!env.regex.test(filename))\n\t\treturn\n\tif (ignores && isIgnored(editor.document.uri, ignores))\n\t\treturn\n\n\tlog('Executing norminette on:', path)\n\n\tconst data: NormData = await execNorminette(path, env.command)\n\tif (data)\n\t\tapplyDecorations(data, editor, env.ignoreErrors, env.displayErrorName)\n\telse\n\t\tclearDecorations(editor)\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n\tlog('Extension activated')\n\tlet enabled: boolean = true\n\tlet env: EnvironmentVariables = getEnvironmentVariables()\n\tif (!env)\n\t\treturn\n\tconst ignores: IgnoreSystem = initNormignore()\n\n\tconst cmds = {\n\t\t'enable': () => {\n\t\t\tenabled = true\n\t\t\tfor (const editor of vscode.window.visibleTextEditors) {\n\t\t\t\tupdateDecorations(editor, ignores, env)\n\t\t\t}\n\t\t},\n\t\t'disable': () => {\n\t\t\tenabled = false\n\t\t\tfor (const editor of vscode.window.visibleTextEditors) {\n\t\t\t\tclearDecorations(editor)\n\t\t\t}\n\t\t},\n\t\t'toggle': () => {\n\t\t\tif (enabled)\n\t\t\t\tcmds.disable()\n\t\t\telse\n\t\t\t\tcmds.enable()\n\t\t},\n\t\t'refresh-tree': () => { }\n\t}\n\n\tconst norminetteProvider = new NorminetteProvider(vscode.workspace.workspaceFolders, ignores)\n\tvscode.window.createTreeView('normTree', {\n\t\ttreeDataProvider: norminetteProvider\n\t})\n\tcmds['refresh-tree'] = () => {\n\t\tlog(vscode.workspace.workspaceFolders.map(f=>f.uri.path))\n\t\tnorminetteProvider.updateEntireTree()\n\t}\n\n\tvscode.window.onDidChangeActiveTextEditor(editor => {\n\t\tif (editor)\n\t\t\ttriggerUpdateDecorations(editor)\n\t}, null, context.subscriptions)\n\n\tvscode.workspace.onDidSaveTextDocument(document => {\n\t\tconst editor = vscode.window.visibleTextEditors.find((editor) => editor.document === document)\n\t\tif (editor)\n\t\t\ttriggerUpdateDecorations(editor)\n\t}, null, context.subscriptions)\n\n\tvscode.workspace.onDidChangeConfiguration((change) => {\n\t\tif (change.affectsConfiguration('codam-norminette-3'))\n\t\t\tenv = getEnvironmentVariables()\n\t\t\tupdateDecorationColor()\n\t}, null, context.subscriptions)\n\n\tvscode.workspace.onDidChangeWorkspaceFolders(() => {\n\t\tnorminetteProvider.setWorkspaceFolders(vscode.workspace.workspaceFolders)\n\t}, null, context.subscriptions)\n\n\tlet timeout: NodeJS.Timeout = undefined\n\tfunction triggerUpdateDecorations(editor: vscode.TextEditor) {\n\t\tif (editor.document.uri.scheme != 'file')\n\t\t\treturn\n\t\tif (timeout)\n\t\t\tclearTimeout(timeout)\n\t\ttimeout = setTimeout(() => {\n\t\t\tnorminetteProvider.updateTreeItem(editor)\n\t\t\tif (enabled)\n\t\t\t\tupdateDecorations(editor, ignores, env)\n\t\t\telse\n\t\t\t\tclearDecorations(editor)\n\t\t}, 500) // delay for when switching tabs fast\n\t}\n\n\tfor (const cmd in cmds) {\n\t\tcontext.subscriptions.push(vscode.commands.registerCommand(`codam-norminette-3.${cmd}`, cmds[cmd]))\n\t}\n\n\tfor (const editor of vscode.window.visibleTextEditors) {\n\t\tupdateDecorations(editor, ignores, env)\n\t}\n}\n","import * as vscode from 'vscode'\nimport * as child_process from 'child_process'\nimport * as os from 'os'\n\ntype CommandData = { command: string, wsl: boolean }\nfunction validateCommand(command: string): CommandData | null {\n\ttry {\n\t\tconst stdout = child_process.execSync(`${command} -v`).toString()\n\t\tif (!(/3\\.\\d+\\.\\d+\\s*$/.test(stdout))) {\n\t\t\tvscode.window.showErrorMessage(`Nominette: wrong version: ${stdout}, must be 3.x.x.`)\n\t\t\treturn null\n\t\t}\n\t}\n\tcatch {\n\t\tif (os.platform() == 'win32') {\n\t\t\ttry {\n\t\t\t\tconst stdout = child_process.execSync(`wsl ${command} -v`).toString()\n\t\t\t\tif (!(/3\\.\\d+\\.\\d+\\s*$/.test(stdout)))\n\t\t\t\t\tvscode.window.showErrorMessage(`Nominette: wrong version: ${stdout}, must be 3.x.x.`)\n\t\t\t\treturn { command: `wsl ${command}`, wsl: true }\n\t\t\t} catch { }\n\t\t}\n\t\tvscode.window.showErrorMessage(`Norminette: \\`${command}' not found, see https://github.com/42School/norminette for installation instructions.`)\n\t\treturn null\n\t}\n\treturn { command, wsl: command.startsWith('wsl ') }\n}\n\nexport type EnvironmentVariables = {\n\tcommand: string,\n\twsl: boolean,\n\tregex: RegExp,\n\tignoreErrors: string[],\n\tdisplayErrorName: boolean\n}\nexport function getEnvironmentVariables(): EnvironmentVariables | null {\n\tconst workspaceConfiguration = vscode.workspace.getConfiguration('codam-norminette-3')\n\tconst command = validateCommand(workspaceConfiguration.get('command'))\n\tif (!command)\n\t\treturn null\n\treturn {\n\t\tcommand: command.command,\n\t\twsl: command.wsl,\n\t\tregex: new RegExp(workspaceConfiguration.get(`regex`)),\n\t\tignoreErrors: workspaceConfiguration.get(`ignoreErrors`) as string[],\n\t\tdisplayErrorName: workspaceConfiguration.get(`displayErrorName`) as boolean\n\t}\n}\n","import ignore, { Ignore } from 'ignore'\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport * as vscode from 'vscode'\nimport { log } from './extension'\n\nexport type IgnoreSystem = {\n\tignored: string[],\n\tnotIgnored: string[],\n\tworkspaces: {\n\t\t[workspace: string]: {\n\t\t\t[folder: string]: Ignore\n\t\t}\n\t}\n\tonChange: vscode.EventEmitter<undefined | null | void>\n}\n\nexport function initNormignore(): IgnoreSystem {\n\tconst ignores: IgnoreSystem = {\n\t\tignored: [], notIgnored: [], workspaces: {},\n\t\tonChange: new vscode.EventEmitter<undefined | null | void>()\n\t}\n\n\tasync function addIgnoreFile(fsPath: string, workspace: string, ignorePath: string) {\n\t\tif (!ignores.workspaces[workspace])\n\t\t\tignores.workspaces[workspace] = {}\n\t\tlog('created / changed:', fsPath)\n\t\tconst fileContent = (await fs.promises.readFile(fsPath)).toString()\n\t\tignores.workspaces[workspace][ignorePath] = ignore().add(fileContent)\n\t}\n\n\tfunction get(fileUri: vscode.Uri): { workspace: string, ignorePath: string } {\n\t\tconst workspace = vscode.workspace.getWorkspaceFolder(fileUri).uri.path\n\t\tif (!workspace)\n\t\t\treturn { workspace: null, ignorePath: null }\n\t\tconst ignorePath = path.dirname(path.relative(workspace, fileUri.path))\n\t\treturn { workspace, ignorePath }\n\t}\n\n\tvscode.workspace.findFiles('**/.normignore').then(async (fileUris) => {\n\t\tfor (const fileUri of fileUris) {\n\t\t\tconst { workspace, ignorePath } = get(fileUri)\n\t\t\tif (workspace)\n\t\t\t\taddIgnoreFile(fileUri.fsPath, workspace, ignorePath)\n\t\t}\n\t})\n\n\tasync function onChange(fileUri: vscode.Uri) {\n\t\tconst { workspace, ignorePath } = get(fileUri)\n\t\tignores.ignored = []\n\t\tignores.notIgnored = []\n\t\tif (workspace)\n\t\t\taddIgnoreFile(fileUri.fsPath, workspace, ignorePath)\n\t\tignores.onChange.fire()\n\t}\n\tconst watcher = vscode.workspace.createFileSystemWatcher('**/.normignore')\n\twatcher.onDidCreate(onChange)\n\twatcher.onDidChange(onChange)\n\twatcher.onDidDelete((fileUri) => {\n\t\tconst { workspace, ignorePath } = get(fileUri)\n\t\tignores.ignored = []\n\t\tignores.notIgnored = []\n\t\tlog('deleted:', fileUri.fsPath)\n\t\tif (workspace && ignores.workspaces[workspace] && ignores.workspaces[workspace][ignorePath])\n\t\t\tdelete ignores.workspaces[workspace][ignorePath]\n\t\tignores.onChange.fire()\n\t})\n\n\treturn ignores\n}\n\nexport function isIgnored(fileUri: vscode.Uri, ignores: IgnoreSystem): boolean {\n\tconst workspace = vscode.workspace.getWorkspaceFolder(fileUri).uri.path\n\tif (!workspace || !ignores.workspaces[workspace])\n\t\treturn false\n\tconst filePath = path.relative(workspace, fileUri.path)\n\tif (ignores.ignored.includes(filePath))\n\t\treturn true\n\tif (ignores.notIgnored.includes(filePath))\n\t\treturn false\n\tconst parts = filePath.split('/')\n\tlet folder: string\n\tfor (let dirs = 1; dirs <= parts.length; dirs++) {\n\t\tconst folderToCheck = path.dirname(parts.slice(0, dirs).join('/'))\n\t\tif (ignores.workspaces[workspace][folderToCheck]) {\n\t\t\tif (folder && ignores.workspaces[workspace][folder].ignores(path.relative(folder, folderToCheck) + '/'))\n\t\t\t\tbreak\n\t\t\tfolder = folderToCheck\n\t\t}\n\t}\n\tif (!folder)\n\t\treturn false\n\tlet result = ignores.workspaces[workspace][folder].test(path.relative(folder, filePath))\n\twhile (folder != '.' && !result.ignored && !result.unignored) {\n\t\tfolder = path.dirname(folder)\n\t\tif (ignores.workspaces[workspace][folder])\n\t\t\tresult = ignores.workspaces[workspace][folder].test(path.relative(folder, filePath))\n\t}\n\treturn result.ignored\n}\n","import { exec } from 'child_process'\n\nasync function execAsync(command): Promise<{ stdout: string, stderr: string } | null> {\n\treturn new Promise((resolve, reject) => {\n\t\texec(`${command}`, (error, stdout, stderr) => {\n\t\t\tresolve({ stdout, stderr })\n\t\t})\n\t})\n}\n\nexport type NormInfo = {\n\tfullText: string,\n\terror: string,\n\tisNotice: boolean,\n\tline: number,\n\tcol: number,\n\terrorText: string\n}\n\nexport type NormData = {\n\t[file: string]: NormInfo[]\n}\n\nfunction normDecrypt(normLine: string): NormInfo {\n\ttry {\n\t\tconst [fullText, error_or_notice, error, line, col, errorText] = normLine.match(/(Error|Notice):\\s*([A-Z_]*)\\s*\\(line:\\s*(\\d*),\\s*col:\\s*(\\d+)\\):\\s*(.*)/)\n\t\tif (!fullText || !error || !line || !col || !errorText)\n\t\t\treturn null\n\t\tconst result = {\n\t\t\tfullText,\n\t\t\terror,\n\t\t\tisNotice: (error_or_notice == 'Notice'),\n\t\t\tline: parseInt(line) - 1,\n\t\t\tcol: parseInt(col) - 1,\n\t\t\terrorText: errorText[0].toUpperCase() + errorText.slice(1)\n\t\t}\n\t\treturn (result)\n\t}\n\tcatch (e) {\n\t\ttry {\n\t\t\tconst [fullText, token_or_line] = normLine.match(/(?:\\s|\\033\\[.*m)*Error: Unrecognized (token|line) .*/)\n\t\t\tif (token_or_line === 'token')\n\t\t\t{\n\t\t\t\tvar [_, errorText, line_str, col_str] = normLine.match(/.* (Unrecognized token) line (\\d+), col (\\d+)/)\n\t\t\t\tvar line = parseInt(line_str) - 1\n\t\t\t\tvar col = parseInt(col_str) - 2\n\t\t\t}\n\t\t\telse if (token_or_line === 'line')\n\t\t\t{\n\t\t\t\tconst [_, errorText1, line_str, col_str, errorText2] = normLine.match(/.* (Unrecognized line )\\((\\d+), (\\d+)\\) (while parsing line)/)\n\t\t\t\tvar errorText = errorText1 + errorText2\n\t\t\t\tvar line = parseInt(line_str) - 1\n\t\t\t\tvar col = parseInt(col_str) - 1\n\t\t\t}\n\t\t\tconst result = {\n\t\t\t\tfullText,\n\t\t\t\terror: 'UNRECOGNIZED_TOKEN',\n\t\t\t\tisNotice: false,\n\t\t\t\tline,\n\t\t\t\tcol,\n\t\t\t\terrorText\n\t\t\t}\n\t\t\treturn (result)\n\t\t}\n\t\tcatch (e) {\n\t\t\treturn null\n\t\t}\n\t}\n}\n\nexport async function execNorminette(path: string, command: string): Promise<NormData | null> {\n\tconst { stdout } = await execAsync(`${command} '${path}'`)\n\tconst lines = stdout.split('\\n').slice(0, -1)\n\tconst normDecrypted: NormData = {}\n\tlet currentFile: string\n\tfor (const line of lines) {\n\t\tif (/(Error|Notice):/.test(line)) {\n\t\t\tif (line.endsWith('is not valid C or C header file'))\n\t\t\t\tcontinue\n\t\t\t// log('line:', line, '\\nescaped:', escape(line))\n\t\t\tconst decrypted = normDecrypt(line)\n\t\t\tif (decrypted) {\n\t\t\t\tif (!normDecrypted[currentFile])\n\t\t\t\t\tnormDecrypted[currentFile] = []\n\t\t\t\tnormDecrypted[currentFile].push(decrypted)\n\t\t\t}\n\t\t} else {\n\t\t\tconst [_, filename, err_ok] = line.match(/(.*): (Error|OK)!$/)\n\t\t\tcurrentFile = filename\n\t\t}\n\t}\n\tif (Object.keys(normDecrypted).length == 0)\n\t\treturn null\n\treturn normDecrypted\n}\n","import * as path from 'path'\nimport * as vscode from 'vscode'\nimport { getEnvironmentVariables } from './getEnvironmentVariables'\nimport { IgnoreSystem, isIgnored } from './normignore'\nimport { execNorminette, NormData, NormInfo } from './norminette'\nimport { log } from './extension'\n\nenum NormTreeNodeType {\n\tROOT,\n\tFOLDER,\n\tFILE,\n\tNORM_ERROR\n}\n\ntype NormTreeNodeData = {\n\ttype: NormTreeNodeType\n} & ({\n\ttype: NormTreeNodeType.ROOT | NormTreeNodeType.FOLDER | NormTreeNodeType.FILE\n\tpath: string\n\tnormData: NormData\n} | {\n\ttype: NormTreeNodeType.NORM_ERROR\n\tfile: string\n\terrorData: NormInfo,\n\terrorId: number\n})\n\nexport class NorminetteProvider implements vscode.TreeDataProvider<NormTreeNode> {\n\tprivate data: { [a: string]: Promise<NormData> } = {}\n\tconstructor(private workspaceFolders: readonly vscode.WorkspaceFolder[], private ignores: IgnoreSystem) {\n\t\tignores.onChange.event(() => this.updateEntireTree(true))\n\t\tthis.updateEntireTree(false)\n\t}\n\n\tgetTreeItem(element: NormTreeNode): vscode.TreeItem {\n\t\treturn element\n\t}\n\n\tgetChildren(element?: NormTreeNode): vscode.ProviderResult<NormTreeNode[]> {\n\t\tif (!this.workspaceFolders) {\n\t\t\treturn Promise.resolve([])\n\t\t}\n\n\t\tif (element) {\n\t\t\treturn Promise.resolve(this.getData(null, element)) // get a sub element\n\t\t} else {\n\t\t\treturn Promise.all(this.workspaceFolders.map(async (folder) => {\n\t\t\t\tconst data = await this.getData(folder, null)\n\t\t\t\tif (data === undefined)\n\t\t\t\t\treturn null\n\t\t\t\treturn data[0]\n\t\t\t})) // get a root element\n\t\t}\n\t}\n\n\tsetWorkspaceFolders(workspaceFolders: readonly vscode.WorkspaceFolder[]) {\n\t\t// log(workspaceFolders.map(f=>f.uri.path))\n\t\tconst currentFolders = this.workspaceFolders.slice()\n\t\tthis.workspaceFolders = workspaceFolders\n\t\tfor (const workspaceFolder of currentFolders)\n\t\t{\n\t\t\tif (this.workspaceFolders.includes(workspaceFolder))\n\t\t\t\tcontinue\n\t\t\tdelete this.data[workspaceFolder.uri.path]\n\t\t}\n\t\tthis.refresh()\n\t}\n\n\tprivate getUnignoredNormData(path: string): Promise<NormData> {\n\t\treturn new Promise<NormData>((resolve) => {\n\t\t\texecNorminette(path, getEnvironmentVariables().command).then((data) => {\n\t\t\t\tif (data == null) {\n\t\t\t\t\tresolve(null)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tconst new_data: NormData = {}\n\t\t\t\tfor (const file in data) {\n\t\t\t\t\tif (!isIgnored(vscode.Uri.parse(file), this.ignores)) {\n\t\t\t\t\t\tnew_data[file] = data[file]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresolve(new_data)\n\t\t\t})\n\t\t})\n\t}\n\n\tupdateEntireTree(do_refresh = true) {\n\t\tthis.data = {}\n\t\tfor (const folder of this.workspaceFolders) {\n\t\t\tthis.data[folder.uri.path] = this.getUnignoredNormData(folder.uri.path)\n\t\t}\n\t\tif (do_refresh)\n\t\t\tthis.refresh()\n\t}\n\n\tasync updateTreeItem(editor: vscode.TextEditor) {\n\t\tif (editor.document.uri.scheme != 'file')\n\t\t\treturn\n\t\tconst file_path = editor.document.uri.path\n\n\t\tconst new_data = await this.getUnignoredNormData(file_path)\n\t\tconst new_data_string = JSON.stringify(new_data)\n\t\tlet changed = false\n\t\tfor (const folder in this.data) {\n\t\t\tconst folder_data = await this.data[folder]\n\t\t\tif (file_path in folder_data) {\n\t\t\t\tif (new_data == null || new_data_string == '{}') {\n\t\t\t\t\tchanged = true\n\t\t\t\t\tdelete folder_data[file_path]\n\t\t\t\t} else if (changed || JSON.stringify(folder_data[file_path]) != new_data_string) {\n\t\t\t\t\tchanged = true\n\t\t\t\t\tfolder_data[file_path] = new_data[file_path]\n\t\t\t\t}\n\t\t\t} else if (new_data != null && new_data_string != '{}' && file_path.startsWith(folder)) {\n\t\t\t\tchanged = true\n\t\t\t\tfolder_data[file_path] = new_data[file_path]\n\t\t\t}\n\t\t}\n\t\tif (changed)\n\t\t\tthis.refresh()\n\t}\n\n\tprivate _onDidChangeTreeData: vscode.EventEmitter<NormTreeNode | undefined | null | void> = new vscode.EventEmitter<NormTreeNode | undefined | null | void>()\n\treadonly onDidChangeTreeData: vscode.Event<NormTreeNode | undefined | null | void> = this._onDidChangeTreeData.event\n\n\trefresh(): void {\n\t\tif (!this.data)\n\t\t\tthis.updateEntireTree()\n\t\tthis._onDidChangeTreeData.fire()\n\t}\n\n\tprivate async getData(folder: vscode.WorkspaceFolder | null, element: NormTreeNode | null) {\n\t\tif (folder != null) {\n\t\t\t// Create root folder\n\t\t\tconst normData = (await this.data[folder.uri.path]) || {}\n\t\t\treturn [new NormTreeNode(folder.name, {\n\t\t\t\ttype: NormTreeNodeType.ROOT,\n\t\t\t\tpath: folder.uri.path,\n\t\t\t\tnormData\n\t\t\t})]\n\t\t}\n\t\tif (element.data.type == NormTreeNodeType.NORM_ERROR)\n\t\t\treturn []\n\t\tif (element.data.type == NormTreeNodeType.FILE) {\n\t\t\t// Create norm errors\n\t\t\tconst filePath = element.data.path\n\t\t\tconst normData = element.data.normData[filePath]\n\t\t\treturn normData.map((datum, index) => {\n\t\t\t\treturn new NormTreeNode(datum.errorText, {\n\t\t\t\t\ttype: NormTreeNodeType.NORM_ERROR,\n\t\t\t\t\terrorData: datum,\n\t\t\t\t\tfile: filePath,\n\t\t\t\t\terrorId: index\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\t\tconst normData = element.data.normData\n\t\tconst [folders, files] = this.getContents(element.data.path, Object.keys(normData))\n\n\t\t// log('folders:', folders, 'data:', normData)\n\t\treturn [...folders.map((folder_path) => {\n\t\t\treturn new NormTreeNode(path.basename(folder_path), {\n\t\t\t\ttype: NormTreeNodeType.FOLDER,\n\t\t\t\tpath: folder_path,\n\t\t\t\tnormData: this.getNormData(folder_path, normData)\n\t\t\t})\n\t\t}), ...files.map((file) => {\n\t\t\treturn new NormTreeNode(path.basename(file), {\n\t\t\t\ttype: NormTreeNodeType.FILE,\n\t\t\t\tpath: file,\n\t\t\t\tnormData: this.getNormData(file, normData)\n\t\t\t})\n\t\t})]\n\t}\n\n\tprivate getContents(p: string, paths: string[]): [folders: string[], files: string[]] {\n\t\tconst folders = new Set<string>()\n\t\tconst files = new Set<string>()\n\t\tfor (const pp of paths) {\n\t\t\tif (path.relative(p, pp).startsWith('../'))\n\t\t\t\tcontinue\n\t\t\tconst rel = path.relative(p, pp)\n\t\t\tconst folder_name = rel.split(path.sep)[0]\n\t\t\tif (rel == folder_name)\n\t\t\t\tfiles.add(pp)\n\t\t\telse\n\t\t\t\tfolders.add(path.resolve(p, folder_name))\n\t\t}\n\t\treturn [[...folders], [...files]]\n\t}\n\n\tprivate getNormData(path: string, normData: NormData) {\n\t\tconst newNormData: NormData = {}\n\t\tObject.keys(normData).forEach((v) => {\n\t\t\tif (v.startsWith(path))\n\t\t\t\tnewNormData[v] = normData[v]\n\t\t})\n\t\treturn newNormData\n\t}\n}\n\n// TODO: Fix line number for TOO_MANY_LINES\nclass NormTreeNode extends vscode.TreeItem {\n\tconstructor(public readonly label: string, public data: NormTreeNodeData) {\n\t\tsuper(label, data.type == NormTreeNodeType.NORM_ERROR ? vscode.TreeItemCollapsibleState.None : vscode.TreeItemCollapsibleState.Collapsed)\n\t\tthis.tooltip = label\n\t\tif (data.type == NormTreeNodeType.NORM_ERROR) {\n\t\t\tthis.id = `${data.file} ${data.errorData.fullText} ${data.errorId}`\n\t\t\tthis.description = `line: ${data.errorData.line + 1}`\n\t\t\tthis.tooltip = data.errorData.fullText\n\n\t\t\tconst errPos = new vscode.Position(data.errorData.line, data.errorData.col)\n\t\t\tthis.command = {\n\t\t\t\tcommand: 'vscode.open',\n\t\t\t\ttitle: 'Open File',\n\t\t\t\targuments: [vscode.Uri.file(data.file), {\n\t\t\t\t\tselection: new vscode.Range(errPos, errPos)\n\t\t\t\t}]\n\t\t\t}\n\t\t} else {\n\t\t\tthis.id = `${data.path}`\n\t\t\tconst errorCount = Object.keys(data.normData).reduce((res, val) => {\n\t\t\t\tif (data.normData[val] == undefined)\n\t\t\t\t\treturn res\n\t\t\t\treturn res + data.normData[val].length\n\t\t\t}, 0)\n\t\t\tthis.description = `${errorCount} error${errorCount == 1 ? '' : 's'}`\n\t\t\tif (data.type == NormTreeNodeType.FILE) {\n\t\t\t\tthis.resourceUri = vscode.Uri.file(data.path)\n\t\t\t\tthis.iconPath = vscode.ThemeIcon.File\n\t\t\t} else {\n\t\t\t\tconst fileCount = Object.keys(data.normData).length\n\t\t\t\tthis.description += ` in ${fileCount} file${fileCount == 1 ? '' : 's'}`\n\t\t\t}\n\t\t}\n\t}\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["makeArray","subject","Array","isArray","REGEX_TEST_BLANK_LINE","REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION","REGEX_REPLACE_LEADING_EXCAPED_HASH","REGEX_SPLITALL_CRLF","REGEX_TEST_INVALID_PATH","KEY_IGNORE","Symbol","for","REGEX_REGEXP_RANGE","REPLACERS","match","indexOf","test","this","_","index","str","length","p1","leadEscape","range","endEscape","close","slashes","slice","cleanRangeBackSlash","replace","from","to","charCodeAt","sanitizeRange","regexCache","Object","create","isString","IgnoreRule","constructor","origin","pattern","negative","regex","throwError","message","Ctor","checkPath","path","originalPath","doThrow","isNotRelative","RangeError","TypeError","convert","p","Ignore","ignorecase","key","_rules","_ignorecase","defineProperty","value","_initCache","_ignoreCache","_testCache","_addPattern","concat","_added","checkPattern","rule","substr","r","source","reduce","prev","current","bind","RegExp","makeRegex","createRule","push","add","split","splitPattern","forEach","addPattern","_testOne","checkUnignored","ignored","unignored","_test","cache","slices","_t","pop","parent","join","ignores","createFilter","filter","paths","factory","options","returnFalse","isPathValid","default","module","exports","process","env","IGNORE_TEST_WIN32","platform","makePosix","REGIX_IS_WINDOWS_PATH_ABSOLUTE","skipBrackets","startPos","lines","bracketPairs","startBracket","hasStartBracket","line","character","i","singleCommentIndex","multiCommentIndex","doubleQuoteIndex","singleQuoteIndex","bracketOpenIndex","earliestInterruptor","bracketIndex","skipPos","interruptorPos","vscode","Position","skipMultiComment","skipDoubleQuote","skipSingleQuote","Range","pos","endIndex","skipUntilUnescapedString","translate","text","Buffer","toString","endPos","bracketPos","bracketPair","start","isEqual","end","decorations","errors","window","createTextEditorDecorationType","overviewRulerColor","overviewRulerLane","OverviewRulerLane","Right","backgroundColor","getDecorationColor","wholeLine","isWholeLine","input","workspace","getConfiguration","get","startsWith","ThemeColor","normData","editor","ignoreErrors","displayErrorName","wholeLineErrors","keys","e","includes","error","decoration","hoverMessage","errorText","document","lineAt","tabOffset","col","tabSplit","len","part","getTabOffset","wordRangeAtPosition","getWordRangeAtPosition","findMatchingBracket","parseBrackets","getText","lineError","decorateWholeLine","setDecorations","outputChannel","log","msgs","createOutputChannel","appendLine","map","msg","util","inspect","updateDecorations","uri","scheme","os","wsl","m","toLowerCase","filename","isIgnored","data","execNorminette","command","applyDecorations","clearDecorations","context","enabled","getEnvironmentVariables","initNormignore","cmds","visibleTextEditors","disable","enable","norminetteProvider","NorminetteProvider","workspaceFolders","timeout","triggerUpdateDecorations","clearTimeout","setTimeout","updateTreeItem","createTreeView","treeDataProvider","f","updateEntireTree","onDidChangeActiveTextEditor","subscriptions","onDidSaveTextDocument","find","onDidChangeConfiguration","change","affectsConfiguration","updateDecorationColor","onDidChangeWorkspaceFolders","setWorkspaceFolders","cmd","commands","registerCommand","workspaceConfiguration","stdout","child_process","execSync","showErrorMessage","validateCommand","notIgnored","workspaces","onChange","EventEmitter","addIgnoreFile","fsPath","ignorePath","fileContent","fs","promises","readFile","fileUri","getWorkspaceFolder","dirname","relative","fire","findFiles","then","fileUris","watcher","createFileSystemWatcher","onDidCreate","onDidChange","onDidDelete","filePath","parts","folder","dirs","folderToCheck","result","normDecrypt","normLine","fullText","error_or_notice","isNotice","parseInt","toUpperCase","token_or_line","line_str","col_str","errorText1","errorText2","Promise","resolve","reject","exec","stderr","execAsync","normDecrypted","currentFile","endsWith","decrypted","err_ok","NormTreeNodeType","_onDidChangeTreeData","onDidChangeTreeData","event","getTreeItem","element","getChildren","getData","all","undefined","currentFolders","workspaceFolder","refresh","getUnignoredNormData","new_data","file","Uri","parse","do_refresh","file_path","new_data_string","JSON","stringify","changed","folder_data","NormTreeNode","name","type","ROOT","NORM_ERROR","FILE","datum","errorData","errorId","folders","files","getContents","folder_path","basename","FOLDER","getNormData","Set","pp","rel","folder_name","sep","newNormData","v","TreeItem","label","super","TreeItemCollapsibleState","None","Collapsed","tooltip","id","description","errPos","title","arguments","selection","errorCount","res","val","resourceUri","iconPath","ThemeIcon","File","fileCount","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}